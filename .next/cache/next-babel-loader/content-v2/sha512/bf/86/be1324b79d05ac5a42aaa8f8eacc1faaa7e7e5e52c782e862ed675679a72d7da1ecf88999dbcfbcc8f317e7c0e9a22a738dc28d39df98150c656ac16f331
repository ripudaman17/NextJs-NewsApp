{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\user\\\\Documents\\\\React\\\\NextJs-NewsApp\\\\pages\\\\index.js\";\nimport MeetupList from \"../components/meetups/MeetupList\";\nimport { MongoClient } from \"mongodb\";\nimport Head from 'next/head'; // const DUMMY_MEETUPS = [\n//   {\n//     id: \"m1\",\n//     title: \"A First Meetup\",\n//     image:\n//       \"https://upload.wikimedia.org/wikipedia/commons/thumb/d/d3/Stadtbild_M%C3%BCnchen.jpg/1024px-Stadtbild_M%C3%BCnchen.jpg\",\n//     address: \"Some Address 5, 12345, Some City\",\n//     description: \"This is a first meetup!\",\n//   },\n//   {\n//     id: \"m2\",\n//     title: \"A Second Meetup\",\n//     image:\n//       \"https://upload.wikimedia.org/wikipedia/commons/thumb/d/d3/Stadtbild_M%C3%BCnchen.jpg/1024px-Stadtbild_M%C3%BCnchen.jpg\",\n//     address: \"Some Address 10, 45, Some City\",\n//     description: \"This is a second meetup!\",\n//   },\n// ];\n\nfunction HomePage(props) {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: /*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"React Meetups\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MeetupList, {\n      meetups: props.meetups\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n} // export async function getServerSideProps(context){ //this function will not run during the build process but always on the server after deployment\n//     //fetch data from an API \n//     //any code that you write here always run on the server\n//     const req = context.req;\n//     const res = context.res;\n//   return {\n//       props: {\n//         meetups: DUMMY_MEETUPS\n//       }\n//     };\n// }\n\n\nexport async function getStaticProps() {\n  //this will only execute in the pages component\n  //the code that we write here is not going to be executed in the client side or end up in the client side.\n  //fetch data from an API\n  //this code will execute when this page is pre-generated\n  const client = await MongoClient.connect('mongodb+srv://ripu3:ripsim690@cluster0.h0nsg.mongodb.net/meetups?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const meetups = await meetupsCollection.find().toArray(); //so that we get back an array of documents\n\n  client.close();\n  return {\n    props: {\n      meetups: meetups.map(meetup => ({\n        title: meetup.title,\n        address: meetup.address,\n        image: meetup.image,\n        id: meetup._id.toString() //it will convert this object to a string\n\n      }))\n    },\n    //when we add this property we unlock a feature called incremental static generation\n    revalidate: 10 //it will revalidate the server in every 10 seconds, this ensures that your data is not older than 10 sec              \n\n  };\n}\nexport default HomePage;","map":{"version":3,"sources":["C:/Users/user/Documents/React/NextJs-NewsApp/pages/index.js"],"names":["MeetupList","MongoClient","Head","HomePage","props","meetups","getStaticProps","client","connect","db","meetupsCollection","collection","find","toArray","close","map","meetup","title","address","image","id","_id","toString","revalidate"],"mappings":";;;AAAA,OAAOA,UAAP,MAAuB,kCAAvB;AACA,SAASC,WAAT,QAA4B,SAA5B;AACA,OAAOC,IAAP,MAAiB,WAAjB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AAGvB,sBACE;AAAA,4BACE,QAAC,IAAD;AAAA,6BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAME,QAAC,UAAD;AAAY,MAAA,OAAO,EAAEA,KAAK,CAACC;AAA3B;AAAA;AAAA;AAAA;AAAA,YANF;AAAA,kBADF;AAUD,C,CAED;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,OAAO,eAAeC,cAAf,GAA+B;AAAE;AACtC;AAEA;AACA;AACA,QAAMC,MAAM,GAAI,MAAMN,WAAW,CAACO,OAAZ,CAAoB,8FAApB,CAAtB;AACA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AACA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AAEA,QAAMN,OAAO,GAAG,MAAMK,iBAAiB,CAACE,IAAlB,GAAyBC,OAAzB,EAAtB,CAToC,CASqB;;AAEzDN,EAAAA,MAAM,CAACO,KAAP;AAEA,SAAM;AACJV,IAAAA,KAAK,EAAE;AACLC,MAAAA,OAAO,EAAEA,OAAO,CAACU,GAAR,CAAYC,MAAM,KAAK;AAC9BC,QAAAA,KAAK,EAAED,MAAM,CAACC,KADgB;AAE9BC,QAAAA,OAAO,EAAEF,MAAM,CAACE,OAFc;AAG9BC,QAAAA,KAAK,EAAEH,MAAM,CAACG,KAHgB;AAI9BC,QAAAA,EAAE,EAAEJ,MAAM,CAACK,GAAP,CAAWC,QAAX,EAJ0B,CAIH;;AAJG,OAAL,CAAlB;AADJ,KADH;AASJ;AACAC,IAAAA,UAAU,EAAE,EAVR,CAUqB;;AAVrB,GAAN;AAaD;AAED,eAAepB,QAAf","sourcesContent":["import MeetupList from \"../components/meetups/MeetupList\";\r\nimport { MongoClient } from \"mongodb\";\r\nimport Head from 'next/head'; \r\n\r\n// const DUMMY_MEETUPS = [\r\n//   {\r\n//     id: \"m1\",\r\n//     title: \"A First Meetup\",\r\n//     image:\r\n//       \"https://upload.wikimedia.org/wikipedia/commons/thumb/d/d3/Stadtbild_M%C3%BCnchen.jpg/1024px-Stadtbild_M%C3%BCnchen.jpg\",\r\n//     address: \"Some Address 5, 12345, Some City\",\r\n//     description: \"This is a first meetup!\",\r\n//   },\r\n//   {\r\n//     id: \"m2\",\r\n//     title: \"A Second Meetup\",\r\n//     image:\r\n//       \"https://upload.wikimedia.org/wikipedia/commons/thumb/d/d3/Stadtbild_M%C3%BCnchen.jpg/1024px-Stadtbild_M%C3%BCnchen.jpg\",\r\n//     address: \"Some Address 10, 45, Some City\",\r\n//     description: \"This is a second meetup!\",\r\n//   },\r\n// ];\r\n\r\nfunction HomePage(props) {\r\n\r\n   \r\n  return (\r\n    <>\r\n      <Head>\r\n        <title>\r\n          React Meetups\r\n        </title>\r\n      </Head>\r\n      <MeetupList meetups={props.meetups} />\r\n      </>\r\n  );\r\n}\r\n\r\n// export async function getServerSideProps(context){ //this function will not run during the build process but always on the server after deployment\r\n//     //fetch data from an API \r\n//     //any code that you write here always run on the server\r\n\r\n//     const req = context.req;\r\n//     const res = context.res;\r\n//   return {\r\n//       props: {\r\n//         meetups: DUMMY_MEETUPS\r\n//       }\r\n//     };\r\n// }\r\n\r\nexport async function getStaticProps(){ //this will only execute in the pages component\r\n  //the code that we write here is not going to be executed in the client side or end up in the client side.\r\n\r\n  //fetch data from an API\r\n  //this code will execute when this page is pre-generated\r\n  const client =  await MongoClient.connect('mongodb+srv://ripu3:ripsim690@cluster0.h0nsg.mongodb.net/meetups?retryWrites=true&w=majority');\r\n  const db = client.db();\r\n  const meetupsCollection = db.collection('meetups');\r\n   \r\n  const meetups = await meetupsCollection.find().toArray();//so that we get back an array of documents\r\n\r\n  client.close();\r\n\r\n  return{\r\n    props: {\r\n      meetups: meetups.map(meetup => ({\r\n        title: meetup.title,\r\n        address: meetup.address,\r\n        image: meetup.image,\r\n        id: meetup._id.toString()  //it will convert this object to a string\r\n      }))\r\n    },\r\n    //when we add this property we unlock a feature called incremental static generation\r\n    revalidate: 10           //it will revalidate the server in every 10 seconds, this ensures that your data is not older than 10 sec              \r\n  };\r\n  \r\n}\r\n\r\nexport default HomePage;\r\n"]},"metadata":{},"sourceType":"module"}