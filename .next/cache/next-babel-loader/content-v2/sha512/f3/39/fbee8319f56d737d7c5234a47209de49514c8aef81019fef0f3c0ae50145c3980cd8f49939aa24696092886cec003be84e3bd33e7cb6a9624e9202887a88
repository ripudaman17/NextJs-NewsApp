{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\user\\\\Documents\\\\React\\\\NextJs-NewsApp\\\\pages\\\\[meetupId]\\\\index.js\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\nimport { MongoClient, ObjectId } from 'mongodb';\nimport Head from \"next/head\";\n\nfunction MeetupDetails(props) {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: [/*#__PURE__*/_jsxDEV(\"title\", {\n        children: props.meetupData.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n        name: \"description\",\n        content: props.meetupData.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(MeetupDetail, {\n      image: props.meetupData.image,\n      title: props.meetupData.title,\n      address: props.meetupData.address,\n      description: props.meetupData.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect('mongodb+srv://ripu3:ripsim690@cluster0.h0nsg.mongodb.net/meetups?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const meetups = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray(); //2nd argument determines which fields should be extracted for every document\n  //this means only include the id and no other field values \n\n  client.close();\n  return {\n    fallback: false,\n    //this key fallback, tells next js whether your paths array contains all supported parameter values or just some of them\n    // if you set it to false, you say your paths contains all supported meetupID values and if there is any other ID other than in the paths array, it will generate 404 error\n    // if you set it to true, next js will try to generate a page for this meetupID dynamically on the server for the incoming request\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    })) //paths should be an array of objects\n    // [\n    //   {\n    //     params: {\n    //       meetupId: \"m1\",\n    //     },\n    //   },\n    //   {\n    //     params: {\n    //       meetupId: \"m2\",\n    //     },\n    //   },\n    // ],\n\n  };\n} //we can define some paths instead of all paths. for eg if we have 100s of pages and we dont wanna pre-generate all of them, but only few of them\n\nexport async function getStaticProps(context) {\n  //fetch data for single meetup\n  //we are getting an id out from the url \n  const meetupId = context.params.meetupId; //this will be an obj where our identifiers between the square brackets will be properties\n\n  const client = await MongoClient.connect('mongodb+srv://ripu3:ripsim690@cluster0.h0nsg.mongodb.net/meetups?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const selectedMeetup = await meetupsCollection.findOne({\n    _id: ObjectId(meetupId)\n  }); //it finds one single document\n\n  client.close();\n  return {\n    props: {\n      meetupData: {\n        id: selectedMeetup._id.toString(),\n        title: selectedMeetup.title,\n        address: selectedMeetup.address,\n        image: selectedMeetup.image,\n        description: selectedMeetup.description\n      }\n    }\n  };\n}\nexport default MeetupDetails;","map":{"version":3,"sources":["C:/Users/user/Documents/React/NextJs-NewsApp/pages/[meetupId]/index.js"],"names":["MeetupDetail","MongoClient","ObjectId","Head","MeetupDetails","props","meetupData","title","description","image","address","getStaticPaths","client","connect","db","meetupsCollection","collection","meetups","find","_id","toArray","close","fallback","paths","map","meetup","params","meetupId","toString","getStaticProps","context","selectedMeetup","findOne","id"],"mappings":"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","sourcesContent":["import MeetupDetail from \"../../components/meetups/MeetupDetail\";\r\nimport {MongoClient, ObjectId} from 'mongodb';\r\nimport Head from \"next/head\";\r\n\r\nfunction MeetupDetails(props) {\r\n  return (\r\n    <>\r\n    <Head>\r\n        <title>{props.meetupData.title}</title>\r\n        <meta name='description' content={props.meetupData.description}/>\r\n    </Head>\r\n      <MeetupDetail\r\n      image={props.meetupData.image}\r\n      title={props.meetupData.title}\r\n      address={props.meetupData.address}\r\n      description={props.meetupData.description}\r\n    />\r\n    </>\r\n  );\r\n}\r\n\r\nexport async function getStaticPaths() {\r\n\r\n  const client =  await MongoClient.connect('mongodb+srv://ripu3:ripsim690@cluster0.h0nsg.mongodb.net/meetups?retryWrites=true&w=majority');\r\n  const db = client.db();\r\n  const meetupsCollection = db.collection('meetups');\r\n\r\n  const meetups = await meetupsCollection.find({}, {_id: 1}).toArray(); //2nd argument determines which fields should be extracted for every document\r\n  //this means only include the id and no other field values \r\n\r\n  client.close();\r\n\r\n  return {\r\n    fallback: false,     //this key fallback, tells next js whether your paths array contains all supported parameter values or just some of them\r\n    // if you set it to false, you say your paths contains all supported meetupID values and if there is any other ID other than in the paths array, it will generate 404 error\r\n    // if you set it to true, next js will try to generate a page for this meetupID dynamically on the server for the incoming request\r\n    paths: meetups.map(meetup => ({\r\n      params: {meetupId: meetup._id.toString()}\r\n    }))  //paths should be an array of objects\r\n    \r\n    \r\n    // [\r\n    //   {\r\n    //     params: {\r\n    //       meetupId: \"m1\",\r\n    //     },\r\n    //   },\r\n    //   {\r\n    //     params: {\r\n    //       meetupId: \"m2\",\r\n    //     },\r\n    //   },\r\n    // ],\r\n  };\r\n}\r\n//we can define some paths instead of all paths. for eg if we have 100s of pages and we dont wanna pre-generate all of them, but only few of them\r\n\r\nexport async function getStaticProps(context) {\r\n  //fetch data for single meetup\r\n\r\n  //we are getting an id out from the url \r\n  const meetupId = context.params.meetupId; //this will be an obj where our identifiers between the square brackets will be properties\r\n  \r\n  const client =  await MongoClient.connect('mongodb+srv://ripu3:ripsim690@cluster0.h0nsg.mongodb.net/meetups?retryWrites=true&w=majority');\r\n  const db = client.db();\r\n  const meetupsCollection = db.collection('meetups');\r\n\r\n  const selectedMeetup = await meetupsCollection.findOne({_id: ObjectId(meetupId)}); //it finds one single document\r\n\r\n  client.close();\r\n\r\n  return {\r\n    props: {\r\n      meetupData: {\r\n        id: selectedMeetup._id.toString(),\r\n        title: selectedMeetup.title,\r\n        address: selectedMeetup.address,\r\n        image: selectedMeetup.image,\r\n        description: selectedMeetup.description\r\n      },\r\n       \r\n    },\r\n  };\r\n}\r\n\r\nexport default MeetupDetails;\r\n"]},"metadata":{},"sourceType":"module"}